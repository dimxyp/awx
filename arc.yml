---
- name: "Onboard Windows Servers to Azure Arc-enabled servers with Public endpoint connectivity"
  hosts: all
  tasks:
    - name: Map azure vars to normalized names
      set_fact:
        service_principal_id: "{{ azure.AZURE_SP_ID }}"
        service_principal_secret: "{{ azure.AZURE_SP_SECRET }}"
        resource_group: "{{ azure.AZURE_RG }}"
        tenant_id: "{{ azure.AZURE_TENANT_ID }}"
        subscription_id: "{{ azure.AZURE_SUB_ID }}"
        arc_version : "{{ azure.AZURE_ARC_VERSION }}"
        location: "{{ azure.location | default('northeurope') }}"

    - name: Check if Connected Machine Agent MSI already exists
      win_stat:
        path: C:\AzureConnectedMachineAgent.msi
      register: azcmagent_win_downloaded
      when: ansible_os_family == 'Windows'

    - name: Download the Connected Machine Agent on Windows servers
      win_get_url:
        url: https://aka.ms/AzureConnectedMachineAgent
        dest: C:\AzureConnectedMachineAgent.msi
      when: (ansible_os_family == 'Windows') and (not azcmagent_win_downloaded.stat.exists)

    - name: Install the Connected Machine Agent on Windows servers
      win_package:
        path: C:\AzureConnectedMachineAgent.msi
      when: (ansible_os_family == 'Windows') and (not azcmagent_win_downloaded.stat.exists)

    - name: Check if Azure Connected Machine Agent is installed
      win_stat:
        path: 'C:\Program Files\AzureConnectedMachineAgent\azcmagent.exe'
      register: azcmagent_installed
      when: ansible_os_family == 'Windows'

    - name: Get Azure Connected Machine Agent version
      win_command: '"C:\Program Files\AzureConnectedMachineAgent\azcmagent.exe" version'
      register: azcmagent_version
      when: azcmagent_installed.stat.exists

    - name: Extract major.minor version
      set_fact:
        azcmagent_version_major_minor: "{{ azcmagent_version.stdout | regex_search('\\d+\\.\\d+') }}"
      when: azcmagent_version is defined 

    - name: Fail if version could not be parsed (agent expected installed)
      fail:
        msg: "Could not parse azcmagent major.minor version from output: {{ azcmagent_version.stdout }}"
      when: azcmagent_version_major_minor is not defined

    # OPTIONAL: normalize arc_version to major.minor in case it includes patch/build
    - name: Normalize target arc major.minor version
      set_fact:
        arc_version_major_minor: "{{ arc_version | regex_search('\\d+\\.\\d+') | default(arc_version) }}"

    - name: Debug - Show detected and desired versions before uninstall
      debug:
        msg: |
          Installed (major.minor): {{ azcmagent_version_major_minor }}
          Target (major.minor):    {{ arc_version_major_minor }}
          Condition (installed <= target): {{ (azcmagent_version_major_minor | float) <= (arc_version_major_minor | float) }}
      when:
        - ansible_os_family == 'Windows'
        - azcmagent_version_major_minor is defined
        - (azcmagent_version_major_minor | float) <= (arc_version_major_minor | float)

    - name: Uninstall agent if version <= target (adjust to < if you only want older)
      win_package:
        path: 'C:\Program Files\AzureConnectedMachineAgent\azcmagent.exe'
        state: absent
      when:
        - ansible_os_family == 'Windows'
        - azcmagent_version_major_minor is defined
        - (azcmagent_version_major_minor | float) <= (arc_version_major_minor | float)

    - name: Remove existing MSI prior to (re)install
      win_file:
        path: C:\AzureConnectedMachineAgent.msi
        state: absent
      when:
        - ansible_os_family == 'Windows'
        - azcmagent_version_major_minor is defined
        - (azcmagent_version_major_minor | float) <= (arc_version_major_minor | float)

    - name: Download MSI for upgrade / reinstall
      win_get_url:
        url: https://aka.ms/AzureConnectedMachineAgent
        dest: C:\AzureConnectedMachineAgent.msi
      when:
        - ansible_os_family == 'Windows'
        - azcmagent_version_major_minor is defined
        - (azcmagent_version_major_minor | float) <= (arc_version_major_minor | float)

    - name: Install (upgrade) Connected Machine Agent
      win_package:
        path: C:\AzureConnectedMachineAgent.msi
      when:
        - ansible_os_family == 'Windows'
        - azcmagent_version_major_minor is defined
        - (azcmagent_version_major_minor | float) <= (arc_version_major_minor | float)

    - name: Final version summary
      debug:
        msg: >
          Installed: {{ azcmagent_version_major_minor }},
          Target: {{ arc_version_major_minor }},
          Reinstall logic used operator: <=
    #################################

    # - name: Check if the Connected Machine Agent has already been connected on Windows
    #   win_command: azcmagent check --location "{{ azure.location }}"
    #   register: azcmagent_win_connected
    #   when: ansible_os_family == 'Windows'
    #   ignore_errors: yes
    #   failed_when: (azcmagent_win_connected.rc not in [ 0, 16 ])
    #   changed_when: False

    # - name: Connect the Connected Machine Agent on Windows servers to Azure Arc
    #   win_shell: 
    #     '& "$env:ProgramFiles\AzureConnectedMachineAgent\azcmagent.exe" connect --service-principal-id "{{ azure.service_principal_id }}" --service-principal-secret "{{ azure.service_principal_secret }}" --resource-group "{{ azure.resource_group }}" --tenant-id "{{ azure.tenant_id }}" --location "{{ azure.location }}" --subscription-id "{{ azure.subscription_id }}" --tags "ArcSQLServerExtensionDeployment=Disabled"'
    #   when: (ansible_os_family == 'Windows') and (azcmagent_win_connected.rc is defined)

    # - name: Disable remote access capabilities
    #   win_shell: '& "$env:ProgramFiles\AzureConnectedMachineAgent\azcmagent.exe" config set incomingconnections.enabled false'
      

    # - name: Disable Guest Configuration on Windows
    #   win_shell: '& "$env:ProgramFiles\AzureConnectedMachineAgent\azcmagent.exe" config set guestconfiguration.enabled false'

    # - name: Set Extension Allowlist on Windows
    #   win_shell: '& "$env:ProgramFiles\AzureConnectedMachineAgent\azcmagent.exe" config set extensions.allowlist "Microsoft.SoftwareUpdateManagement/WindowsOsUpdateExtension,Microsoft.CPlat.Core/WindowsPatchExtension"'
